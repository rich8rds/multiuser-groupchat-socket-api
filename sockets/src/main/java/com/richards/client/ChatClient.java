package com.richards.client;import com.richards.client.services.MessageService;import com.richards.client.services.UserStatusService;import lombok.Getter;import java.io.*;import java.net.Socket;import java.util.ArrayList;import java.util.Arrays;import java.util.List;import java.util.Scanner;@Getterpublic class ChatClient {    private final String address;    private final Integer PORT;    private String username;    private Socket socket;    private OutputStream outputStream;    private InputStream inputStream;    private BufferedReader bufferedReader;    List<UserStatusService> userStatusServices;    List<MessageService> messageServices;    public ChatClient(String address, Integer PORT) {        this.address = address;        this.PORT = PORT;        this.userStatusServices = new ArrayList<>();        this.messageServices = new ArrayList<>();    }    public boolean isConnectedToServer() {        try{            this.socket = new Socket(address, PORT);            this.outputStream = socket.getOutputStream();            this.inputStream = socket.getInputStream();            this.bufferedReader = new BufferedReader(new InputStreamReader(inputStream));            return true;        }catch (IOException e) {            e.printStackTrace();        }        return false;    }    public boolean isLoggedIn() {        try {            String serverResponse = "";            do{                this.username = getUsernameInput();                if(username.length() > 2) {                    System.out.println("username: " + username);                    String command = "login " + username + "\n";                    outputStream.write(command.getBytes());                    serverResponse = bufferedReader.readLine();                }            } while(!serverResponse.equals("Joined Chat") && username.length() < 3);            activateListeners();            startMessagesThread();            return true;        } catch (IOException e) {            throw new RuntimeException(e);        }    }    private void startMessagesThread() {        new Thread(this::runMessageLoop).start();    }    private void runMessageLoop() {        try {            String read;            while((read = bufferedReader.readLine()) != null){                String[] tokens = read.split(" ");                String command = tokens[0];                if(command.equalsIgnoreCase("message")){                    String message = "You typed: " + read + "\n";                    System.out.println(message);                }else if(command.equals("msg")) {                    tokens = read.split(" ", 3);                    System.out.println(Arrays.toString(tokens));                    receiveMessage(tokens);                }else if(command.equalsIgnoreCase("online")) {                    handleOnline(tokens);                }else if(command.equalsIgnoreCase("offline")) {                    handleLogoff(tokens);                }            }        } catch (IOException e) {            throw new RuntimeException(e);        }    }    private void handleOnline(String[] tokens) {        String userLogin = tokens[1];        userStatusServices.forEach(userStatusService -> userStatusService.online(userLogin));    }    private void handleLogoff(String[] tokens) {        String userLogin = tokens[1];        userStatusServices.forEach(userStatusService -> userStatusService.offline(userLogin));    }    private void receiveMessage(String[] tokens) {        if(tokens.length == 3) {            String msgSender = tokens[1];            String msgBody = tokens[2];            messageServices.forEach(messageService -> messageService.onMessageReceived(msgSender, msgBody));        }    }    public void logoff() {       try {            String command = "logoff\n";            outputStream.write(command.getBytes());        } catch (IOException e) {            throw new RuntimeException(e);        }    }    private String getUsernameInput() {        Scanner scanner = new Scanner(System.in);        System.out.print("Enter your username(length must be greater than 2): ");        return scanner.nextLine();    }    private void activateListeners() {        messageServices.add((sender, msgBody) -> {            if(!sender.equals(username))                System.err.println("#"+ sender + " -> " + msgBody);        });        userStatusServices.add(new UserStatusService() {            public void online(String userLogin) {System.err.println("ONLINE: " + userLogin);}            public void offline(String userLogin) {System.err.println("OFFLINE: " + userLogin);}        });    }    public void sendMessages() {        new Thread(() -> {            while(true) {                try {                    Scanner input = new Scanner(System.in);                    System.err.println("Enter a message or (logoff) to exit: ");                    String message = input.nextLine();                    if(message.equals("logoff")) {                        logoff();                        break;                    }                    else {                        String messageToServer = "msg " + " " + message + "\n";                        outputStream.write(messageToServer.getBytes());                    }                } catch (IOException e) {                    throw new RuntimeException(e);                }            }        }).start();    }}